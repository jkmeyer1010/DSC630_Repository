## Display the amount of sleep on Tuesday of week 1 by selecting the variable index
## Assuming week1_sleep starts on Sunday and ends on Saturday.
week1_sleep[3]
## Create a vector called `week1_sleep_weekdays`
## Assign the weekday values using indice slicing
## Assuming week1_sleep starts on Sunday and ends on Saturday
week1_sleep_weekdays <- week1_sleep[2:6]
## Add the total hours slept in week one using the `sum` function
## Assign the value to variable `total_sleep_week1`
total_sleep_week1 <- sum(week1_sleep)
## Create a vector called `week2_sleep` representing how many hours slept each night of the week
## Use the values 7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9
week2_sleep <- c(7.1, 7.4, 7.9, 6.5, 8.1, 8.2, 8.9)
## Add the total hours slept in week two using the sum function
## Assign the value to variable `total_sleep_week2`
total_sleep_week2 <- sum(week2_sleep)
## Determine if the total sleep in week 1 is less than week 2 by using the < operator
total_sleep_week1 < total_sleep_week2
## Calculate the mean hours slept in week 1 using the `mean()` function
mean(week1_sleep)
## Create a vector called `days` containing the days of the week.
## Start with Sunday and end with Saturday
days <- c("Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday")
## Assign the names of each day to `week1_sleep` and `week2_sleep` using the `names` function and `days` vector
names(week1_sleep) <- days
names(week2_sleep) <- days
## Display the amount of sleep on Tuesday of week 1 by selecting the variable name
week1_sleep["Tuesday"]
## Create vector called weekdays from the days vector
weekdays <- days[2:6]
## Create vector called weekends containing Sunday and Saturday
weekends <- c(days[1], days[7])
## Calculate the mean about sleep on weekdays for each week
## Assign the values to weekdays1_mean and weekdays2_mean
weekdays1_mean <- mean(week1_sleep[weekdays])
weekdays2_mean <- mean(week2_sleep[weekdays])
## Using the weekdays1_mean and weekdays2_mean variables,
## see if weekdays1_mean is greater than weekdays2_mean using the `>` operator
weekdays1_mean > weekdays2_mean
## Determine how many days in week 1 had over 8 hours of sleep using the `>` operator
print(sum(week1_sleep > 8))
## Create a matrix from the following three vectors
student01 <- c(100.0, 87.1)
student02 <- c(77.2, 88.9)
student03 <- c(66.3, 87.9)
students_combined <- c(student01, student02, student03)
grades <- matrix(students_combined, byrow = TRUE, nrow = 3)
## Add a new student row with `rbind()`
student04 <- c(95.2, 94.1)
grades <- rbind(grades, student04)
## Add a new assignment column with `cbind()`
assignment04 <- c(92.1, 84.3, 75.1, 97.8)
grades <- cbind(grades, assignment04)
## Add the following names to columns and rows using `rownames()` and `colnames()`
assignments <- c("Assignment 1", "Assignment 2", "Assignment 3")
students <- c("Florinda Baird", "Jinny Foss", "Lou Purvis", "Nola Maloney")
rownames(grades) <- students
colnames(grades) <- assignments
## Total points for each assignment using `colSums()`
colSums(grades,na.rm = FALSE, dims = 1)
## Total points for each student using `rowSums()`
rowSums(grades, na.rm = FALSE, dims = 1)
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
## Matrix with 10% and add it to grades
weighted_grades <- grades * 0.1 + grades
## Create a factor of book genres using the genres_vector
## Assign the factor vector to factor_genre_vector
genres_vector <- c("Fantasy", "Sci-Fi", "Sci-Fi", "Mystery", "Sci-Fi", "Fantasy")
factor_genre_vector <- factor(genres_vector)
## Use the `summary()` function to print a summary of `factor_genre_vector`
summary(factor_genre_vector)
## Create ordered factor of book recommendations using the recommendations_vector
## `no` is the lowest and `yes` is the highest
recommendations_vector <- c("neutral", "no", "no", "neutral", "yes")
factor_recommendations_vector <- factor(
recommendations_vector,
ordered = TRUE,
levels = c("no", "neutral", "yes")
)
## Use the `summary()` function to print a summary of `factor_recommendations_vector`
summary(factor_recommendations_vector)
## Using the built-in `mtcars` dataset, view the first few rows using the `head()` function
head(mtcars, n = 2L)
## Using the built-in mtcars dataset, view the last few rows using the `tail()` function
tail(mtcars, n = 2L)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
## Sorting the characters_df by age using the order function and assign the result to the sorted_characters_df
sorted_characters_df <- characters_df[order(age),]
## Use `head()` to output the first few rows of `sorted_characters_df`
head(sorted_characters_df, n = 2L)
## Select all of the ring bearers from the dataframe and assign it to ringbearers_df
ringbearers_df <- characters_df[characters_df$ring_bearer == TRUE,]
## Use `head()` to output the first few rows of `ringbearers_df`
head(ringbearers_df, n = 2L)
View(characters_df)
## Check your current working directory using `getwd()`
getwd()
## List the contents of the working directory with the `dir()` function
dir()
## If the current directory does not contain the `data` directory, set the
## working directory to project root folder (the folder should contain the `data` directory
## Use `setwd()` if needed
setwd("C:/Users/jkmey/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the file `data/tidynomicon/person.csv` to `person_df1` using `read.csv`
## Examine the structure of `person_df1` using `str()`
person_df1 <- read.csv("data/tidynomicon/person.csv", header = TRUE, sep = ",")
str(person_df1)
## If the current directory does not contain the `data` directory, set the
## working directory to project root folder (the folder should contain the `data` directory
## Use `setwd()` if needed
setwd("C:\Users\jkmey\OneDrive\Documents\Work_Documents\Bellevue_Data_Science\3_DSC_520_Statistics_for_DataScience\DSC_520_Github_Repository\dsc520")
## If the current directory does not contain the `data` directory, set the
## working directory to project root folder (the folder should contain the `data` directory
## Use `setwd()` if needed
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the file `data/tidynomicon/person.csv` to `person_df1` using `read.csv`
## Examine the structure of `person_df1` using `str()`
person_df1 <- read.csv("data/tidynomicon/person.csv", header = TRUE, sep = ",")
str(person_df1)
## R interpreted names as factors, which is not the behavior we want
## Load the same file to person_df2 using `read.csv` and setting `stringsAsFactors` to `FALSE`
## Examine the structure of `person_df2` using `str()`
person_df2 <- read.csv("data/tidynomicon/person.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(person_df2)
View(person_df1)
View(person_df2)
## Read the file `data/scores.csv` to `scores_df`
## Display summary statistics using the `summary()` function
scores_df <- read.csv("data/scores.csv", header = TRUE, sep = ",")
summary(scores_df)
## Load the `readxl` library
library(readxl)
## Using the excel_sheets() function from the `readxl` package,
## list the worksheets from the file `data/G04ResultsDetail2004-11-02.xls`
excel_sheets("data/G04ResultsDetail2004-11-02.xls")
voter_turnout_df1 <- read_excel("data/G04ResultsDetail2004-11-02.xls", 2, skip = 1)
str(voter_turnout_df1)
## Using the `read_excel()` function, read the Voter Turnout sheet
## from `data/G04ResultsDetail2004-11-02.xls`
## Skip the first two rows and manually assign the columns using `col_names`
## Use the names "ward_precint", "ballots_cast", "registered_voters", "voter_turnout"
## Assign the data to the `voter_turnout_df2`
## Examine the structure of `voter_turnout_df2` using `str()`
voter_turnout_df2 <- read_excel("data/G04ResultsDetail2004-11-02.xls", 2, skip = 2, col_names = c("ward_precint", "ballots_cast", "registered_voters", "voter_turnout"))
str(voter_turnout_df2)
## Load the `DBI` library
## install.packages("RSQLite")
library(DBI)
## Create a database connection to `data/tidynomicon/example.db` using the dbConnect() function
## The first argument is the database driver which in this case is `RSQLite::SQLite()`
## The second argument is the path to the database file
## Assign the connection to `db` variable
db <- dbConnect(RSQLite::SQLite(),"data/tidynomicon/example.db")
## Query the Person table using the `dbGetQuery` function and the
## `SELECT * FROM PERSON;` SQL statement
## Assign the result to the `person_df` variable
## Use `head()` to look at the first few rows of the `person_df` dataframe
person_df <- dbGetQuery(db, "SELECT * FROM PERSON")
head(person_df)
## List the tables using the `dbListTables()` function
## Assign the result to the `table_names` variable
table_names <- dbListTables(db)
## Read all of the tables at once using the `lapply` function and assign the result to the `tables` variable
## Use `table_names`, `dbReadTable`, and `conn = db` as arguments
## Print out the tables
tables <- lapply(table_names, dbReadTable, conn = db)
tables
## Use the `dbDisconnect` function to disconnect from the database
dbDisconnect(db)
## Import the `jsonlite` library
library(jsonlite)
## Convert the scores_df dataframe to JSON using the `toJSON()` function
toJSON(scores_df)
## Convert the scores dataframe to JSON using the `toJSON()` function with the `pretty=TRUE` option
toJSON(scores_df, pretty = TRUE)
## Read the "scores.csv" file located in my working directory and store as scores_df
## Summary of overall scores is printed.
scores_df <- read.csv("data/scores.csv", header = TRUE, sep = ",")
summary(scores_df)
## Variable sports_section_df created to contain grades and scores for the students in the sports section.
sports_section_df <- subset(scores_df, Section == "Sports", select = c(Count, Score, Section))
View(scores_df)
summary(sports_section_df)
## Variable regular_course_df to contain grades and scores for the students in the regular section.
regular_section_df <- subset(scores_df, Section == "Regular", select = c(Count, Score, Section))
summary(regular_section_df)
## Install "ggplot2" and plot each respective section.
## install.packages("ggplot2")
library(ggplot2)
## Scatter Plot of the count of student scores within the sports section.
sports_plot <- ggplot(sports_section_df, aes(x = Score, y = Count)) + geom_point()
sports_plot + ggtitle("Count of Student Scores in Sports Section") + xlab("Student Score") + ylab("Count of Students")
## Scatter Plot of the count of student scores within the regular section.
regular_plot <- ggplot(regular_section_df, aes(x = Score, y = Count)) + geom_point()
regular_plot + ggtitle("Count of Student Scores in Regular Section") + xlab("Student Score") + ylab("Count of Students")
## Comparison between the sections
sports_scores <- sports_section_df["Score"]
regular_scores <- regular_section_df["Score"]
View(regular_scores)
View(scores_df)
sports_scores > regular_scores
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
# https://ggplot2.tidyverse.org/reference/geom_point.html
## Using `geom_point()` create three scatterplots for
## `height` vs. `earn`
ggplot(heights_df, aes(x = height, y = earn)) + geom_point()
## `age` vs. `earn`
ggplot(heights_df, aes(x = age, y = earn)) + geom_point()
## `ed` vs. `earn`
ggplot(heights_df, aes(x = ed, y = earn)) + geom_point()
## Re-create the three scatterplots and add a regression trend line using
## the `geom_smooth()` function
## `height` vs. `earn`
ggplot(heights_df, aes(x= height, y = earn)) + geom_point() + geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
## `age` vs. `earn`
ggplot(heights_df, aes(x = age, y = earn)) + geom_point() + geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
## `ed` vs. `earn`
ggplot(heights_df, aes(x = ed, y = earn)) + geom_point() + geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
## Create a scatterplot of `height`` vs. `earn`.  Use `sex` as the `col` (color) attribute
ggplot(heights_df, aes(x = height, y = earn, col = sex)) + geom_point()
## Using `ggtitle()`, `xlab()`, and `ylab()` to add a title, x label, and y label to the previous plot
## Title: Height vs. Earnings
## X label: Height (Inches)
## Y Label: Earnings (Dollars)
ggplot(heights_df, aes(x = height, y = earn, col = sex)) + geom_point() + ggtitle("Height vs. Earnings") + xlab("Height (Inches)") + ylab("Earnings (Dollars)")
# https://ggplot2.tidyverse.org/reference/geom_histogram.html
## Create a histogram of the `earn` variable using `geom_histogram()`
ggplot(heights_df, aes(earn)) + geom_histogram()
## Create a histogram of the `earn` variable using `geom_histogram()`
## Use 10 bins
ggplot(heights_df, aes(earn)) + geom_histogram(bins = 10)
# https://ggplot2.tidyverse.org/reference/geom_density.html
## Create a kernel density plot of `earn` using `geom_density()`
ggplot(heights_df, aes(earn)) +  geom_density()
View(heights_df)
## R Code for Exercise 5
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## R Code for Exercise 5
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the `data/acs-14-1yr-s0201.csv` to
survey_df <- read.csv("data/acs-14-1yr-s0201.csv")
## Outputs for str(), nrow(), and ncol().
str(survey_df)
nrow(survey_df)
ncol(survey_df)
## create a histogram of the "HSDegree" variable and determine summary statistics.
surveyHistogram_density <- ggplot(survey_df, aes(HSDegree)) + geom_histogram(binwidth = 2.775, bins = 12, colour = "black", aes(y=..density..,fill=..count..)) + ggtitle("Population Percent with High School Degree") + xlab("High School Degree (%)") + ylab("Density")
surveyHistogram_density
summary(survey_df["HSDegree"])
##Include a normal distribution curve on the histogram
surveyHistogram_Normal <- surveyHistogram_density + stat_function(fun=dnorm, color = "red", args=list(mean=mean(survey_df$HSDegree), sd=sd(survey_df$HSDegree)))
surveyHistogram_Normal
## Create a probability plot of the "HSDegree" variable.
probability_plot <- qqnorm(survey_df$HSDegree); qqline(survey_df$HSDegree)
probability_plot
## Use the stat.desc() to quantify normality.
## install.packages("pastecs")
library(pastecs)
round(stat.desc(survey_df$HSDegree, basic = TRUE, desc = TRUE, norm = TRUE, p = 0.95), 3)
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
View(heights_df)
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
# https://ggplot2.tidyverse.org/reference/geom_boxplot.html
## Create boxplots of sex vs. earn and race vs. earn using `geom_point()` and `geom_boxplot()`
## sex vs. earn
ggplot(heights_df, aes(x=sex, y=earn)) + geom_point() + geom_boxplot()
## race vs. earn
ggplot(heights_df, aes(x=race, y=earn)) + geom_point() + geom_boxplot()
# https://ggplot2.tidyverse.org/reference/geom_bar.html
## Using `geom_bar()` plot a bar chart of the number of records for each `sex`
ggplot(heights_df, aes(sex)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each race
ggplot(heights_df, aes(race)) + geom_bar()
## Create a horizontal bar chart by adding `coord_flip()` to the previous plot
ggplot(heights_df, aes(race)) + geom_bar() + coord_flip()
# https://www.rdocumentation.org/packages/ggplot2/versions/3.3.0/topics/geom_path
## Load the file `"data/nytimes/covid-19-data/us-states.csv"` and
## assign it to the `covid_df` dataframe
covid_df <- read.csv("data/nytimes/covid-19-data/us-states.csv")
## Parse the date column using `as.Date()``
covid_df$date <- as.Date(covid_df$date)
class(covid_df$date)
## Create three dataframes named `california_df`, `ny_df`, and `florida_df`
## containing the data from California, New York, and Florida
california_df <- covid_df[ which( covid_df$state == "California"), ]
ny_df <- covid_df[ which( covid_df$state == "New York"), ]
florida_df <- covid_df[ which( covid_df$state == "Florida"), ]
## Plot the number of cases in Florida using `geom_line()`
ggplot(data=florida_df, aes(x=date, y=cases, group=1)) + geom_line()
## Add lines for New York and California to the plot
ggplot(data=florida_df, aes(x = date, group=1)) +
geom_line(aes(y = cases)) +
geom_line(data=ny_df, aes(y = cases)) +
geom_line(data=california_df, aes(y = cases))
## Use the colors "darkred", "darkgreen", and "steelblue" for Florida, New York, and California
ggplot(data=florida_df, aes(x = date, group=1)) +
geom_line(aes(y = cases), color = "darkred") +
geom_line(data=ny_df, aes(y = cases), color= "darkgreen") +
geom_line(data=california_df, aes(y = cases), color= "steelblue")
## Add a legend to the plot using `scale_colour_manual`
## Add a blank (" ") label to the x-axis and the label "Cases" to the y axis
ggplot(data=florida_df, aes(x = date, group=1)) +
geom_line(aes(y = cases, colour = "Florida")) +
geom_line(data=ny_df, aes(y = cases,colour="New York")) +
geom_line(data=california_df, aes(y = cases, colour="California")) +
scale_colour_manual("",
breaks = c("Florida", "New York", "California"),
values = c("darkred", "darkgreen", "steelblue")) +
xlab(" ") + ylab("Cases")
## Scale the y axis using `scale_y_log10()`
ggplot(data=florida_df, aes(x=date, group=1)) +
geom_line(aes(y = cases, colour = "Florida")) +
geom_line(data=ny_df, aes(y = cases,colour="New York")) +
geom_line(data=california_df, aes(y = cases, colour="California")) +
scale_colour_manual("",
breaks = c("Florida", "New York", "California"),
values = c("darkred", "darkgreen", "steelblue")) +
xlab(" ") + ylab("Cases") + scale_y_log10()
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
## Using `cor()` compute correlation coefficients for
## height vs. earn
cor(heights_df$height, heights_df$earn)
### age vs. earn
cor(heights_df$age, heights_df$earn)
### ed vs. earn
cor(heights_df$ed, heights_df$earn)
## Spurious correlation
## The following is data on US spending on science, space, and technology in millions of today's dollars
## and Suicides by hanging strangulation and suffocation for the years 1999 to 2009
## Compute the correlation between these variables
tech_spending <- c(18079, 18594, 19753, 20734, 20831, 23029, 23597, 23584, 25525, 27731, 29449)
suicides <- c(5427, 5688, 6198, 6462, 6635, 7336, 7248, 7491, 8161, 8578, 9000)
cor(tech_spending, suicides)
## Set the working directory to the root of your DSC 520 directory
setwd("C:/Users/jkmey/OneDrive/Documents/Work_Documents/Bellevue_Data_Science/3_DSC_520_Statistics_for_DataScience/DSC_520_Github_Repository/dsc520")
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
## Load the ggplot2 library
library(ggplot2)
## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome
age_lm <-  lm(earn ~ age, data=heights_df)
## View the summary of your model using `summary()`
summary(age_lm)
## Creating predictions using `predict()`
age_predict_df <- data.frame(earn = predict(age_lm, newdata = age_lm$earn), age=heights_df$age)
## Plot the predictions against the original data
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red',data = age_predict_df, aes(y = earn, x = age))
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
## R Squared R^2 = SSM\SST
r_squared <- ssm/sst
## Number of observations
n <- length(heights_df$earn)
## Number of regression parameters
p <- 2
## Corrected Degrees of Freedom for Model (p-1)
dfm <- p-1
## Degrees of Freedom for Error (n-p)
dfe <- n-p
## Corrected Degrees of Freedom Total:   DFT = n - 1
dft <- n-1
## Mean of Squares for Model:   MSM = SSM / DFM
msm <- ssm/dfm
## Mean of Squares for Error:   MSE = SSE / DFE
mse <- sse/dfe
## Mean of Squares Total:   MST = SST / DFT
mst <- sst/dft
## F Statistic F = MSM/MSE
f_score <- msm/mse
## Adjusted R Squared R2 = 1 - (1 - R2)(n - 1) / (n - p)
adjusted_r_squared <- 1 - (1 - r_squared)*(((n - 1) / (n - p)))
## Calculate the p-value from the F distribution
p_value <- pf(f_score, dfm, dft, lower.tail=F)
clr
clear
clr
clear
c
##
setwd("C:/Users/jkmey/Documents/Github/DSC630_Course_Assignments/DSC630_Repository/Week_1")
## Load the Student_Mental_Health.csv data `Student_Mental_Health.csv`
df <- read.csv("Student_Mental_Health.csv")
View(df)
View(df)
## Rename the columns of the dataset.
colnames(df) <- c('timestamp', 'gender', 'age', 'course',
'cgpa', 'married', 'depressed',
'anxiety','panic_attacks', 'seek_treatment')
View(df)
## Drop the 'timestamp' column since it is not value added.
df1 <- subset(df, select = -c(timestamp))
View(df1)
View(df1)
## Rename the columns of the df.
colnames(df) <- c('timestamp', 'gender', 'age', 'course', 'num_of_years',
'cgpa', 'married', 'depressed',
'anxiety','panic_attacks', 'seek_treatment')
View(df1)
View(df1)
## ## Set the working directory to the root of your DSC 630 directory
setwd("C:/Users/jkmey/Documents/Github/DSC630_Course_Assignments/DSC630_Repository/Week_1")
## Load the Student_Mental_Health.csv data `Student_Mental_Health.csv`
df <- read.csv("Student_Mental_Health.csv")
## Rename the columns of the df.
colnames(df) <- c('timestamp', 'gender', 'age', 'course', 'num_of_years',
'cgpa', 'married', 'depressed',
'anxiety','panic_attacks', 'seek_treatment')
## Drop the 'timestamp' column since it is not value added.
df1 <- subset(df, select = -c(timestamp))
View(df1)
## Remove the year and Year text from the num_of_years column.
df1$num_of_years <- gsub("Year","",as.character(df1$num_of_years))
df1$num_of_years <- gsub("year","",as.character(df1$num_of_years))
## Change num_of_years column to integer.
df1$num_of_years <- as.numeric(as.character(df$num_of_years))
View(df1)
## ## Set the working directory to the root of your DSC 630 directory
setwd("C:/Users/jkmey/Documents/Github/DSC630_Course_Assignments/DSC630_Repository/Week_1")
## Load the Student_Mental_Health.csv data `Student_Mental_Health.csv`
df <- read.csv("Student_Mental_Health.csv")
## Rename the columns of the df.
colnames(df) <- c('timestamp', 'gender', 'age', 'course', 'num_of_years',
'cgpa', 'married', 'depressed',
'anxiety','panic_attacks', 'seek_treatment')
## Drop the 'timestamp' column since it is not value added.
df1 <- subset(df, select = -c(timestamp))
## Remove the year and Year text from the num_of_years column.
df1$num_of_years <- gsub("Year","",as.character(df1$num_of_years))
df1$num_of_years <- gsub("year","",as.character(df1$num_of_years))
## Change num_of_years column to integer.
df1$num_of_years <- as.numeric(as.character(df1$num_of_years))
View(df1)
## Load the ggplot2 package
library(ggplot2)
theme_set(theme_minimal())
## Using `geom_bar()` plot a bar chart of the number of records for each `age`
ggplot(df1, aes(age)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each `gender`
ggplot(df1, aes(gender)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each `depressed`
ggplot(df1, aes(gender)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each `depressed`
ggplot(df1, aes(depressed)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each `anxious`
ggplot(df1, aes(anxiety)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each `panic_attacks`
ggplot(df1, aes(panic_attacks)) + geom_bar()
## Using `geom_bar()` plot a bar chart of the number of records for each `gender`
ggplot(df1, aes(seek_treatment)) + geom_bar()
## Create boxplots of gender vs. age using `geom_point()` and `geom_boxplot()`
## gender vs. age
ggplot(heights_df, aes(x=gender, y=age)) + geom_point() + geom_boxplot()
## Create boxplots of gender vs. age using `geom_point()` and `geom_boxplot()`
## gender vs. age
ggplot(df1, aes(x=gender, y=age)) + geom_point() + geom_boxplot()
ggplot
ggplot(df1, aes(x=depressed, y=age)) + geom_point() + geom_boxplot()
